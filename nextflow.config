/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    waterisk Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

params {
    fastq_pass_dir = "/home/andriamanga@newcefe.newage.fr/waterisk/fastq_pass/" //reset to null
    output_dir = "waterisk_output/"
    raw = false
    c_size = 1000000
    read_min_length = 200
    trim_end_size = 0
    quality_trim = 10
    amr_db = "card"
    medaka = true
    remove_barcode = false
    target_bases = 500000000
    
    //max ressource options
    //default: expected to run on local computer. Expecting to be overwritten
    max_cpus = 10
    max_memory = 12.GB

    params.plasme_env = "/home/andriamanga@newcefe.newage.fr/waterisk/PLASMe/plasme.yaml"
    params.plasme_py = "/home/andriamanga@newcefe.newage.fr/waterisk/PLASMe/PLASMe.py"
    params.plasme_db = "/home/andriamanga@newcefe.newage.fr/waterisk/PLASMe/DB"
    
}

profiles {

    test {
        includeConfig 'conf/test.config'
        process {
            executor = 'local'
            withLabel: 'process_high' { // some process need a lot of ram and cpus, better to limit maximum number of process instances that can be executed in parallel
                cpus = params.max_cpus
                memory = params.max_memory
            }
        }
    }

    local {
        process {
            executor = 'local'

            withLabel: 'process_high' { // some process need a lot of ram and cpus, better to limit maximum number of process instances that can be executed in parallel
                cpus = params.max_cpus
                memory = params.max_memory
            }
        }
    }

    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
        process {
            withName: REMOVE_BARCODES {
                conda = 'bioconda::porechop'
            }
            withLabel: 'plasme' {
                conda = params.plasme_env
            }
            //TO DO: add conda env for remaining process
        }
    }
    
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }

    docker {
        conda.enabled          = false
        docker.enable          = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }

    singularity {
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }

    podman {
        podman.enabled         = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    
    shifter {
        shifter.enabled        = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    
    charliecloud {
        charliecloud.enabled   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        apptainer.enabled      = false
    }

    apptainer {
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }

    gitpod {
        executor.name          = 'local'
        executor.cpus          = 16
        executor.memory        = 60.GB
    }

    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
}

    // Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "waterisk_output/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "waterisk_output/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "waterisk_output/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "waterisk_output/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'WATERISK'
    author          = """Vahiniaina ANDRIAMANGA"""
    homePage        = 'https://github.com/NjivaAndriamanga/waterisk'
    description     = """Assemble bacterial genome from Nanopore to detect AMR and MGE association"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.3'
    version         = '1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
// includeConfig 'conf/modules.config'


// Nextflow plugins
plugins {
    id 'nf-validation@1.1.3' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
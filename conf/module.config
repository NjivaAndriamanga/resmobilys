/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

waterisk_img = "herinjiva/resmobilys:0.0.1"
cutadapt_img = "genomicpariscentre/cutadapt"
dbscan_img = "herinjiva/dbscan:0.0.1"
plasme_img = "herinjiva/plasme:0.0.1"
hybracter_img = "quay.io/gbouras13/hybracter:0.11.0"
mob_img = "quay.io/biocontainers/mob_suite:3.1.9--pyhdfd78af_1"
rgi_img = "quay.io/biocontainers/rgi:6.0.3--pyha8f3691_0"
busco_img = "ezlabgva/busco"
kraken2_img = "staphb/kraken2"
abricate_img = "staphb/abricate"
amrfinder_img = "ncbi/amr:latest"
platon_img = "herinjiva/platon:0.0.1"
isescan_img = "herinjiva/isescan:0.0.1"

process {
    container = "docker://${waterisk_img}"
    cpus = params.default_cpus
    memory = params.default_cpus

    withName: CLEAN_LONG_READS {
        container = "docker://${cutadapt_img}"
        publishDir = [
            path: { "${params.output_dir}trimmed_output/" },
            mode: params.publish_dir_mode
        ]
    }
    
    withName: ASSEMBLE_GENOME {
        container = "docker://${hybracter_img}"
        publishDir = [
            path: { "${params.output_dir}hybracter/" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: "BUSCO" {
        container  = "docker://${busco_img}"
        publishDir = [
            path: { "${params.output_dir}busco/" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: "DBSCAN" {
        container = "docker://${dbscan_img}"
        publishDir = [
            path: { "${params.output_dir}dbscan/" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: "FILTER_CIRCULAR_PLASMID" {
        publishDir = [
            path: { "${params.output_dir}hybracter/" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: "KRAKEN" {
        container = "docker://${kraken2_img}"
        publishDir = [
            path: { "${params.output_dir}kraken/" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: "VF_BLAST" {
        publishDir = [
            path: { "${params.output_dir}vf_blast/" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: "RGI2GFF" {
        publishDir = [
            path: { "${params.output_dir}final_output/" },
            mode: params.publish_dir_mode
        ]
    }
    withName: "ISESCAN" {
        container = "docker://${isescan_img}"
        publishDir = [
            path: { "${params.output_dir}final_output/" },
            mode: params.publish_dir_mode
        ]
    }

    withLabel: "abricate" {
        container = "docker://${abricate_img}"
        publishDir = [
            path : { "${params.output_dir}final_output/" },
            mode: params.publish_dir_mode,
        ]
    }

    withLabel: "MERGE_TYPE" {
        publishDir = [
            path: { "${params.output_dir}plasmid_annotation/" },
            mode: params.publish_dir_mode,
        ]
    }

    withLabel: 'plasme' {
        container = "docker://${plasme_img}"
        publishDir = [
            path: { "${params.output_dir}plasme_output/" },
            mode: params.publish_dir_mode,
        ]
    }

    withLabel: 'platon' {
        container = "docker://${platon_img}"
        publishDir = [
            path: { "${params.output_dir}platon_output/"},
            mode: params.publish_dir_mode,
        ]
    }

    withLabel: 'mob' {
        container =  "docker://${mob_img}"
        publishDir = [
            path: { "${params.output_dir}plasmid_annotation/"},
            mode: params.publish_dir_mode,
        ]
    }

    //integron_finder from pasteur container is not suitable with nextflow
    withLabel: 'integron_finder' {
        publishDir = [
            path: { "${params.output_dir}intergron_finder/" },
            mode: params.publish_dir_mode,
        ]
    }

    withLabel: 'amrfinder' {
        container = "docker://${amrfinder_img}"
        publishDir = [
            path: { "${params.output_dir}final_output/" },
            mode: params.publish_dir_mode,
        ]
    }

    withLabel: 'rgi' {
        container = "docker://${rgi_img}"
        publishDir = [
            path: { "${params.output_dir}final_output/" },
            mode: params.publish_dir_mode,
        ]
    }

    withLabel: 'tnfinder' {
        publishDir = [
            path: { "${params.output_dir}tnfinder/" },
            mode: params.publish_dir_mode,
        ]
    }   
}